d3d9_version = vcs_tag(
  command: ['git', 'describe', '--dirty=+'],
  input:    'version.rc.in', 
  output:  'version.rc')

d3d9_res = wrc_generator.process(d3d9_version)

d3d9_shaders = files([
  'shaders/d3d9_convert_yuy2_uyvy.comp',
  'shaders/d3d9_convert_l6v5u5.comp',
  'shaders/d3d9_convert_x8l8v8u8.comp',
  'shaders/d3d9_convert_a2w10v10u10.comp',
  'shaders/d3d9_convert_nv12.comp',
  'shaders/d3d9_convert_yv12.comp'
])

d3d9_src = [
  'd3dx9/d3dx9_core.h',
  'd3dx9/d3dx9_effect.h',
  'd3dx9/d3dx9_math.h',
  
  'd3dx9/d3dx9_shader.h',
  'd3dx9/d3dx9_tex.h',
  'd3dx9/d3dx9_util.cpp',
  'd3dx9/d3dx9_util.h',
  'd3dx9/d3dx9.h',
#  'd3dx9/d3dx9_math.inl'
  'mge/configuration.h',
  'mge/distantinit.cpp',
  'mge/distantland.cpp',
  'mge/distantland.h',
  'mge/distantshader.h',
  'mge/dlformat.h',
  'mge/dlmath.cpp',
  'mge/dlmath.h',
  'mge/ffeshader.cpp',
  'mge/ffeshader.h',
  'mge/inidata.h',
  'mge/macrofunctions.cpp',
  'mge/memorypool.cpp',
  'mge/memorypool.h',
  'mge/mgeversion.h',
  'mge/mmefunctiondefs.h',
  'mge/morrowindbsa.cpp',
  'mge/morrowindbsa.h',
  'mge/mwbridge.cpp',
  'mge/mwbridge.h',
  'mge/quadtree.cpp',
  'mge/quadtree.h',
  'mge/renderdepth.cpp',
  'mge/renderexterior.cpp',
  'mge/rendergrass.cpp',
  'mge/rendershadow.cpp',
  'mge/renderwater.cpp',
  'mge/specificrender.cpp',
  'mge/specificrender.h',
  'mge/statusoverlay.cpp',
  'mge/statusoverlay.h',
  'mge/userhud.cpp',
  'mge/userhud.h',
  'mge/api.cpp',
  'mge/api.h',
  'mge/configinternal.h',
  'mge/configuration.cpp',

  'mwse/funcentity.cpp',
  'mwse/funcentity.h',
  'mwse/funcgeneral.cpp',
  'mwse/funcgeneral.h',
  'mwse/funcgmst.cpp',
  'mwse/funcgmst.h',
  'mwse/funchud.cpp',
  'mwse/funchud.h',
  'mwse/funcinput.cpp',
  'mwse/funcinput.h',
  'mwse/funcmwui.cpp',
  'mwse/funcmwui.h',
  'mwse/funcphysics.cpp',
  'mwse/funcphysics.h',
  'mwse/funcshader.cpp',
  'mwse/funcshader.h',
  'mwse/funcweather.cpp',
  'mwse/funcweather.h',
  'mwse/mgebridge.cpp',
  'mwse/mgebridge.h',
  'mwse/mwseinstruction.cpp',
  'mwse/mwseinstruction.h',
  'mwse/tes3types.h',
  'mwse/VMTYPES.h',
  'mwse/funccamera.cpp',
  'mwse/funccamera.h',

  'support/pngsave.cpp',
  'support/pngsave.h',
  'support/rgbvector.h',
#  'support/rgbvector.inl'
  'support/winheader.h',
  'support/log.cpp',
  'support/log.h',

  'd3d9_adapter.cpp',
  'd3d9_adapter.h',
  'd3d9_buffer.cpp',
  'd3d9_buffer.h',
  'd3d9_caps.h',
  'd3d9_common_buffer.cpp',
  'd3d9_common_buffer.h',
  'd3d9_common_texture.cpp',
  'd3d9_common_texture.h',
  'd3d9_constant_layout.h',
  'd3d9_constant_set.h',
  'd3d9_cursor.cpp', 
  'd3d9_cursor.h',
  'd3d9_device.cpp',
  'd3d9_device.h',
  'd3d9_device_child.h',
  'd3d9_fixed_function.cpp',
  'd3d9_fixed_function.h',
  'd3d9_format.cpp',
  'd3d9_format.h',
  'd3d9_format_helpers.cpp',
  'd3d9_format_helpers.h',
  'd3d9_hud.cpp',
  'd3d9_hud.h',
  'd3d9_include.h',
  'd3d9_initializer.cpp',
  'd3d9_initializer.h',
  'd3d9_interface.cpp',
  'd3d9_interface.h',
  'd3d9_main.cpp',
  'd3d9_monitor.cpp',
  'd3d9_monitor.h',
  'd3d9_multithread.cpp',
  'd3d9_multithread.h',
  'd3d9_names.cpp',
  'd3d9_names.h',
  'd3d9_options.cpp',
  'd3d9_options.h',
  'd3d9_query.cpp',
  'd3d9_query.h',
  'd3d9_resource.h',
  'd3d9_sampler.cpp',
  'd3d9_sampler.h',
  'd3d9_shader.cpp',
  'd3d9_shader.h',
  'd3d9_shader_permutations.h',
  'd3d9_shader_validator.h',
  'd3d9_spec_constants.h',
  'd3d9_state.cpp',
  'd3d9_state.h',
  'd3d9_stateblock.cpp',
  'd3d9_stateblock.h',
  'd3d9_subresource.h',
  'd3d9_surface.cpp',
  'd3d9_surface.h',
  'd3d9_swapchain.cpp', 
  'd3d9_swapchain.h',
  'd3d9_swvp_emu.cpp',
  'd3d9_swvp_emu.h',
  'd3d9_texture.cpp',
  'd3d9_texture.h',
  'd3d9_util.cpp',
  'd3d9_util.h',
  'd3d9_vertex_declaration.cpp',
  'd3d9_vertex_declaration.h',
  'd3d9_volume.cpp',
  'd3d9_volume.h',
  'd3d9_rtx.cpp',
  'd3d9_rtx.h',
  'd3d9_rtx_utils.cpp',
  'd3d9_rtx_utils.h',
  'd3d9_rtx_geometry.cpp',
]

d3d9_dll = shared_library('d3d9', d3d9_src, glsl_generator.process(d3d9_shaders), d3d9_res,
  name_prefix         : '',
  link_with           : [ util_lib ],
  dependencies        : [ dxso_dep, dxvk_dep, util_dep ],
  include_directories : [ dxvk_include_path, dxvk_shader_include_path, usd_include_paths ],
  install             : true,
  objects             : not dxvk_is_msvc ? 'd3d9' + def_spec_ext : [],
  vs_module_defs      : 'd3d9'+def_spec_ext,
  override_options    : ['cpp_std='+dxvk_cpp_std])

d3d9_dep = declare_dependency(
  link_with           : [ d3d9_dll ],
  include_directories : [ dxvk_include_path ])
 # Get script paths
 if build_os == 'windows' and not dxvk_is_ninja
   custom_target('copy_d3d9_to_output',
     output           : ['copy_d3d9_to_output'],
     build_by_default : true,
     depends          : [ d3d9_dll ],
     command          : [copy_script_path, meson.current_build_dir(), output_dir, 'd3d9*'] )
 endif
 