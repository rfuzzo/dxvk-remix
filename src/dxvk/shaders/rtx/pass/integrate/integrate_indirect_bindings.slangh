/*
* Copyright (c) 2022-2023, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

#include "rtx/pass/integrate/integrate_indirect_binding_indices.h"

#include "rtx/algorithm/rtxdi/rtxdi.slangh"
#include "rtx/utility/shader_types.slangh"

// Shared Inputs

layout(binding = INTEGRATE_INDIRECT_BINDING_SKYPROBE)
SamplerCube<float3> SkyProbe;

layout(r16ui, binding = INTEGRATE_INDIRECT_BINDING_SHARED_FLAGS_INPUT)
Texture2D<uint> SharedFlags;

layout(r16ui, binding = INTEGRATE_INDIRECT_BINDING_SHARED_MEDIUM_MATERIAL_INDEX_INPUT)
Texture2D<uint> SharedMediumMaterialIndex;

// Inputs

layout(r16f, binding = INTEGRATE_INDIRECT_BINDING_PRIMARY_CONE_RADIUS_INPUT)
Texture2D<float> PrimaryConeRadius;

layout(r16f, binding = INTEGRATE_INDIRECT_BINDING_SECONDARY_CONE_RADIUS_INPUT)
Texture2D<float> SecondaryConeRadius;

// Note: Needed for RTXDI sample stealing.
layout(rgba32f, binding = INTEGRATE_INDIRECT_BINDING_PRIMARY_WORLD_POSITION_INPUT)
Texture2D<float4> PrimaryWorldPositionWorldTriangleNormal;

// Note: Needed for RTXDI sample stealing.
layout(binding = INTEGRATE_INDIRECT_BINDING_PRIMARY_RTXDI_RESERVOIR)
RWStructuredBuffer<RTXDI_PackedReservoir> RtxdiReservoirBuffer;

layout(rgba32f, binding = INTEGRATE_INDIRECT_BINDING_RAY_ORIGIN_DIRECTION_INPUT)
Texture2D<float4> RayOriginDirection;

layout(r8, binding = INTEGRATE_INDIRECT_BINDING_FIRST_HIT_PERCEPTUAL_ROUGHNESS_INPUT)
Texture2D<float> FirstHitPerceptualRoughness;

layout(rg32f, binding = INTEGRATE_INDIRECT_BINDING_LAST_GBUFFER_INPUT)
Texture2D<float2> GBufferLast;

layout(rgba32f, binding = INTEGRATE_INDIRECT_BINDING_PREV_WORLD_POSITION_INPUT)
Texture2D<float4> PreviousWorldPosition_WorldTriangleNormal;

layout(binding = INTEGRATE_INDIRECT_BINDING_VOLUME_FILTERED_RADIANCE_INPUT)
Sampler3D<float3> VolumeFilteredRadiance;

layout(r16f, binding = INTEGRATE_INDIRECT_BINDING_PRIMARY_HIT_DISTANCE_INPUT)
Texture2D<float> PrimaryHitDistance;

layout(r16f, binding = INTEGRATE_INDIRECT_BINDING_SECONDARY_HIT_DISTANCE_INPUT)
Texture2D<float> SecondaryHitDistance;

layout(rgba16f, binding = INTEGRATE_INDIRECT_BINDING_LAST_COMPOSITE_INPUT)
Texture2D<float4> LastComposite;

layout(r32ui, binding = INTEGRATE_INDIRECT_BINDING_FIRST_SAMPLED_LOBE_DATA_INPUT)
Texture2D<uint> FirstSampledLobeData;

// Storage

layout(rgba32ui, binding = INTEGRATE_INDIRECT_BINDING_DECAL_MATERIAL_STORAGE)
REORDER_COHERENT RWTexture2D<uint4> DecalMaterial;

// Outputs

layout(binding = INTEGRATE_INDIRECT_BINDING_RESTIR_GI_RESERVOIR_OUTPUT)
RWStructuredBuffer<ReSTIRGI_PackedReservoir> RestirGIReservoirBuffer;

layout(rgba16f, binding = INTEGRATE_INDIRECT_BINDING_RESTIR_GI_RADIANCE_OUTPUT)
REORDER_COHERENT RWTexture2D<float4> RestirGIRadiance;

layout(rgba32f, binding = INTEGRATE_INDIRECT_BINDING_RESTIR_GI_HIT_GEOMETRY_OUTPUT)
RWTexture2D<float4> RestirGIHitGeometry;


// Aliased resources

layout(rgba16f, binding = INTEGRATE_INDIRECT_BINDING_ALIASED_DATA_0)
uniform struct AliasedData0
{
  Texture2D<float4> ThroughputConeRadius;                               // Input
  REORDER_COHERENT RWTexture2D<float4> DecalEmissiveRadiance;           // Intermediate storage
  
  // Indirect radiance and hit distance output for an active target driven by GeometryFlags for a given pixel. 
  // It contains data for either {Primary / Secondary Surface, Diffuse / Specular Lobe}
  RWTexture2D<float4> IndirectRadianceHitDistance;                      // Output
} aliasedData0;


// Auxilary inputs/outputs

layout(r32ui, binding = INTEGRATE_INSTRUMENTATION)
#ifdef ENABLE_INSTRUMENTATION
REORDER_COHERENT // Conditionally enabled as it seemed to add a tiny overhead though within a margin of error 
                 // even when the resource is not used
#endif
RWTexture2D<uint> Instrumentation;
