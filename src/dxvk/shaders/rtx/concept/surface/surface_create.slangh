/*
* Copyright (c) 2022-2023, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

// Note: surface.h must be first include to define required structures
#include "rtx/concept/surface/surface.h"
#include "rtx/utility/common.slangh"
#include "rtx/utility/packing.slangh"

Surface surfaceCreate(MemorySurface memorySurface)
{
  // Decode the Surface from the packed memory representation

  Surface surface;

  const u16vec2 indexData0 = unpack16(memorySurface.data0.x);
  const u16vec2 indexData1 = unpack16(memorySurface.data0.y);
  const u16vec2 indexData2 = unpack16(memorySurface.data0.z);
  const u16vec2 indexData3 = unpack16(memorySurface.data0.w);

  surface.positionBufferIndex = indexData0.x;
  surface.previousPositionBufferIndex = indexData0.y;
  surface.normalBufferIndex = indexData1.x;
  surface.texcoordBufferIndex = indexData1.y;
  surface.indexBufferIndex = indexData2.x;
  surface.color0BufferIndex = indexData2.y;
  surface.surfaceMaterialIndex = indexData3.x;

  surface.hashPacked = indexData3.y;

  // Offsets are 4 bytes, so no unpacking 
  surface.positionOffset = memorySurface.data1.x;
  surface.normalOffset = memorySurface.data1.z;
  surface.texcoordOffset = memorySurface.data1.w;
  surface.color0Offset = memorySurface.data2.x;

  surface.positionStride = uint8_t(memorySurface.data2.y);
  surface.normalStride   = uint8_t(memorySurface.data2.y >> 8u);
  surface.texcoordStride = uint8_t(memorySurface.data2.y >> 16u);
  surface.color0Stride   = uint8_t(memorySurface.data2.y >> 24u);

  surface.firstIndex = memorySurface.data2.z & 0xFFFFFFu;
  surface.indexStride = uint8_t(memorySurface.data2.z >> 24u);

  const uint32_t flagData = memorySurface.data2.w;

  // Note: 18 of 32 bits used in flagData
  surface.isEmissive = (flagData & (1u << 0)) != 0u;
  surface.isFullyOpaque = (flagData & (1u << 1)) != 0u;
  surface.isStatic = (flagData & (1u << 2)) != 0u;
  surface.alphaTestType = uint8_t((flagData >> 3) & alphaTestTypeMask);
  // Note: Explicit calculation done rather than using usual unorm decoding function to be exact with the
  // way alpha is meant to be interpreted as a floating point value.
  surface.alphaTestReferenceValue = float16_t(uint8_t((flagData >> 6) & 0xFFu)) / float16_t(0xFFu);
  surface.blendType = uint8_t((flagData >> 14) & surfaceBlendTypeMask);
  surface.invertedBlend      = (flagData & (1u << 18)) != 0u;
  surface.isBlendingDisabled = (flagData & (1u << 19)) != 0u;
  surface.isEmissiveBlend    = (flagData & (1u << 20)) != 0u;
  surface.isParticle         = (flagData & (1u << 21)) != 0u;
  surface.isDecal            = (flagData & (1u << 22)) != 0u;
  surface.isBlendedTerrain   = (flagData & (1u << 23)) != 0u;
  surface.isAnimatedWater    = (flagData & (1u << 24)) != 0u;
  surface.isClipPlaneEnabled = (flagData & (1u << 25)) != 0u;
  surface.isMatte            = (flagData & (1u << 26)) != 0u;

  const vec4 prevObjectToWorldData0 = uintBitsToFloat(memorySurface.data3);
  const vec4 prevObjectToWorldData1 = uintBitsToFloat(memorySurface.data4);
  const vec4 prevObjectToWorldData2 = uintBitsToFloat(memorySurface.data5);

  surface.prevObjectToWorld = transpose(mat3x4(
    prevObjectToWorldData0.xyz,
    vec3(prevObjectToWorldData0.w, prevObjectToWorldData1.xy),
    vec3(prevObjectToWorldData1.zw, prevObjectToWorldData2.x),
    prevObjectToWorldData2.yzw));

  const vec4 normalObjectToWorldData0 = uintBitsToFloat(memorySurface.data6);
  const vec4 normalObjectToWorldData1 = uintBitsToFloat(memorySurface.data7);
  const float normalObjectToWorldData2 = uintBitsToFloat(memorySurface.data13.w);

  surface.normalObjectToWorld = transpose(mat3x3(
    normalObjectToWorldData0.xyz,
    vec3(normalObjectToWorldData0.w, normalObjectToWorldData1.xy),
    vec3(normalObjectToWorldData1.zw, normalObjectToWorldData2)));

  const vec4 objectToWorldData0 = uintBitsToFloat(memorySurface.data8);
  const vec4 objectToWorldData1 = uintBitsToFloat(memorySurface.data9);
  const vec4 objectToWorldData2 = uintBitsToFloat(memorySurface.data10);

  surface.objectToWorld = transpose(mat3x4(
    objectToWorldData0.xyz,
    vec3(objectToWorldData0.w, objectToWorldData1.xy),
    vec3(objectToWorldData1.zw, objectToWorldData2.x),
    objectToWorldData2.yzw));

  const vec4 textureTransformData0 = uintBitsToFloat(memorySurface.data11);
  const vec4 textureTransformData1 = uintBitsToFloat(memorySurface.data12);
  const float textureTransformData2 = uintBitsToFloat(memorySurface.data13.x);
  const vec4 textureTransformData3 = uintBitsToFloat(memorySurface.data15);

  surface.textureTransform = transpose(float4x4(
    vec4(textureTransformData0.xyz, 0),
    vec4(textureTransformData0.w, textureTransformData1.xy, 0),
    vec4(textureTransformData1.zw, textureTransformData2, 0),
    textureTransformData3));

  surface.tFactor = memorySurface.data13.y;
  const uint32_t textureFlagData = memorySurface.data13.z;

  surface.textureColorArg1Source = uint8_t((textureFlagData     ) & 0x3);
  surface.textureColorArg2Source = uint8_t((textureFlagData >> 2) & 0x3);
  surface.textureColorOperation  = uint8_t((textureFlagData >> 4) & 0x7);
  surface.textureAlphaArg1Source = uint8_t((textureFlagData >> 7) & 0x3);
  surface.textureAlphaArg2Source = uint8_t((textureFlagData >> 9) & 0x3);
  surface.textureAlphaOperation  = uint8_t((textureFlagData >> 11) & 0x7);
  surface.texcoordGenerationMode  = uint8_t((textureFlagData >> 17) & 0x3);

  surface.clipPlane = uintBitsToFloat(memorySurface.data14);


  return surface;
}
