/*
* Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

static const float pi = 3.1415926535897932384626433832795f;
static const float twoPi = 2.0f * pi;
static const float fourPi = 4.0f * pi;
static const float goldenRatio = 1.61803398875f;
static const float silverRatio = 0.61803398875f;

static const float float16Max = 65504.f;
static const float floatMax = 3.402823466e+38f;

static const int int16Max = 32767;
static const int intMax = 2147483647;

// Clamps a value to the range [0, 1]
#define GENERIC_SATURATE(type)       \
type saturate(type x) {              \
  return clamp(x, type(0), type(1)); \
}

GENERIC_SATURATE(float16_t)
GENERIC_SATURATE(float)
GENERIC_SATURATE(f16vec3)
GENERIC_SATURATE(vec3)

// Squares a value
#define GENERIC_SQUARE(type) \
type square(type x)          \
{                            \
  return x * x;              \
}

GENERIC_SQUARE(float16_t)
GENERIC_SQUARE(float)
GENERIC_SQUARE(f16vec3)
GENERIC_SQUARE(vec3)

// Cubes a value
#define GENERIC_CUBE(type) \
type cube(type x)          \
{                          \
  return square(x) * x;    \
}

GENERIC_CUBE(float16_t)
GENERIC_CUBE(float)

// Raises a value to the fifth power
#define GENERIC_POW5(type)    \
type pow5(type x)             \
{                             \
  return square(x) * cube(x); \
}

GENERIC_POW5(float16_t)
GENERIC_POW5(float)

// Calculates the sign of a floating point value, but treating 0 as a positive value
#define GENERIC_SIGN_NOT_ZERO(type)        \
type signNotZero(type x)                   \
{                                          \
  return x < type(0) ? type(-1) : type(1); \
}

GENERIC_SIGN_NOT_ZERO(float16_t)
GENERIC_SIGN_NOT_ZERO(float)

#define GENERIC_INV_CLAMP_POW_5(type)                  \
type invClampPow5(type x)                              \
{                                                      \
  return pow5(clamp(type(1) - x, type(0), type(1)));   \
}

GENERIC_INV_CLAMP_POW_5(float16_t)
GENERIC_INV_CLAMP_POW_5(float)

// Performs a "safe" division operation avoiding division by zero by clamping the denominator
// to a specified epsilon. May still result in infinities due to overflow.
#define GENERIC_SAFE_POSITIVE_DIVIDE(type, epsilonType)           \
type safePositiveDivide(                                          \
  type numerator, type denominator, epsilonType epsilon)          \
{                                                                 \
  return numerator / max(denominator, epsilon);                   \
}

GENERIC_SAFE_POSITIVE_DIVIDE(float16_t, float16_t)
GENERIC_SAFE_POSITIVE_DIVIDE(float, float)
GENERIC_SAFE_POSITIVE_DIVIDE(f16vec3, float16_t)
GENERIC_SAFE_POSITIVE_DIVIDE(vec3, float)

// Performs a "safer" division operation than the safe division function by also clamping the numerator
// based on the denominator and a specified maximum value to guard against overflows to infinity.
#define GENERIC_SAFER_POSITIVE_DIVIDE(type, clampType)                    \
type saferPositiveDivide(                                                 \
  type numerator, type denominator, clampType epsilon, clampType maximum) \
{                                                                         \
  const type safeDenominator = max(denominator, epsilon);                 \
                                                                          \
  return min(numerator, safeDenominator * maximum) / safeDenominator;     \
}

GENERIC_SAFER_POSITIVE_DIVIDE(float16_t, float16_t)
GENERIC_SAFER_POSITIVE_DIVIDE(float, float)
GENERIC_SAFER_POSITIVE_DIVIDE(f16vec3, float16_t)
GENERIC_SAFER_POSITIVE_DIVIDE(vec3, float)

// Normalizes a vector "safely" by falling back to another vector in the case of
// an inability to normalize (to avoid NaNs from normalization).
#define GENERIC_SAFE_NORMALIZE(type, lengthType)     \
type safeNormalize(type vector, type fallbackVector) \
{                                                    \
  const lengthType vectorLength = length(vector);    \
                                                     \
  if (vectorLength == lengthType(0.0f))              \
  {                                                  \
    return fallbackVector;                           \
  }                                                  \
                                                     \
  return vector / vectorLength;                      \
}

GENERIC_SAFE_NORMALIZE(f16vec3, float16_t)
GENERIC_SAFE_NORMALIZE(vec3, float)

#define GENERIC_SQUARE_LENGTH(type, vectorType) \
type squareLength(vectorType x)                 \
{                                               \
  return dot(x, x);                             \
}

GENERIC_SQUARE_LENGTH(float16_t, f16vec2)
GENERIC_SQUARE_LENGTH(float16_t, f16vec3)
GENERIC_SQUARE_LENGTH(float16_t, f16vec4)
GENERIC_SQUARE_LENGTH(float, vec2)
GENERIC_SQUARE_LENGTH(float, vec3)
GENERIC_SQUARE_LENGTH(float, vec4)

// Calculates an orthonormal basis from a specified normal vector
// [Duff et al. 17, Building An Orthonormal Basis, Revisited]
void calcOrthonormalBasis(f16vec3 normal, out f16vec3 tangent, out f16vec3 bitangent)
{
  const float16_t sign = signNotZero(normal.z);

  const float16_t a = float16_t(-1.0f) / (sign + normal.z);
  const float16_t b = normal.x * normal.y * a;

  tangent = f16vec3(float16_t(1.0f) + sign * normal.x * normal.x * a, sign * b, -sign * normal.x);
  bitangent = f16vec3(b, sign + normal.y * normal.y * a, -normal.y);
}

// Calculates spherical coordinates to cartesian coordinates given either the standard or a custom basis.
#define GENERIC_CALC_SPHERICAL_DIRECTION(type, vectorType)                  \
vectorType calcSphericalDirection(type sinTheta, type cosTheta,             \
                                  type sinPhi, type cosPhi)                 \
{                                                                           \
  return vectorType(sinTheta * cosPhi, sinTheta * sinPhi, cosTheta);        \
}                                                                           \
                                                                            \
vectorType calcSphericalDirection(type sinTheta, type cosTheta,             \
                                  type sinPhi, type cosPhi,                 \
                                  vectorType x, vectorType y, vectorType z) \
{                                                                           \
  return sinTheta * cosPhi * x + sinTheta * sinPhi * y + cosTheta * z;      \
}

GENERIC_CALC_SPHERICAL_DIRECTION(float16_t, f16vec3)
GENERIC_CALC_SPHERICAL_DIRECTION(float, vec3)

f16vec3 alignHemisphereWithCoordinateSystem(f16vec3 hemisphere, f16vec3 up)
{
  f16mat3 tbn;

  tbn[2] = up;

  calcOrthonormalBasis(up, tbn[0], tbn[1]);

  return normalize(mul(tbn, hemisphere));
}

// Gram-Schmidt Orthogonalization
#define GENERIC_ORTHOGONALIZE(type) \
type orthogonalize(type x, type y)  \
{                                   \
  return x - y * dot(x, y);         \
}

GENERIC_ORTHOGONALIZE(f16vec3)
GENERIC_ORTHOGONALIZE(vec3)

// Normalization variant of orthogonalization function
#define GENERIC_ORTHONORMALIZE(type)     \
type orthonormalize(type x, type y)      \
{                                        \
  return normalize(orthogonalize(x, y)); \
}

GENERIC_ORTHONORMALIZE(f16vec3)
GENERIC_ORTHONORMALIZE(vec3)

// Safe normalization variant of orthogonalization function
#define GENERIC_SAFE_ORTHONORMALIZE(type)                    \
type safeOrthonormalize(type x, type y, type fallbackVector) \
{                                                            \
  return safeNormalize(orthogonalize(x, y), fallbackVector); \
}

GENERIC_SAFE_ORTHONORMALIZE(f16vec3)
GENERIC_SAFE_ORTHONORMALIZE(vec3)

// Calculates the quaternion which transforms the normalized vector src to normalized vector dst
// Note: returns a zero quat if src == -dst, case when dot(src, dst) == -1 needs to be handled if this is expected.
f16vec4 quaternionCreateOrientation(f16vec3 src, f16vec3 dst)
{
  // https://stackoverflow.com/questions/1171849/finding-quaternion-representing-the-rotation-from-one-vector-to-another
  f16vec4 q;
  q.xyz = cross(src, dst);
  q.w = 1.0 + dot(src, dst);

  // Normalize the quaternion
  float16_t len = length(q);
  q = (len > float16_t(0.0)) ? q / len : f16vec4(1.0, 0.0, 0.0, 0.0);

  return q;
}

// Transform a vector v with a quaternion q, v doesn't need to be normalized
f16vec3 quaternionTransformVector(f16vec4 q, f16vec3 v)
{
  return v + float16_t(2.0) * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

f16vec4 quaternionInverse(f16vec4 q)
{
  return f16vec4(-q.xyz, q.w);
}

f16vec4 quaternionMultiply(f16vec4 q1, f16vec4 q2)
{
  f16vec4 q;

  // q1 * q2
  q.w = q1.w * q2.w - dot(q1.xyz, q2.xyz);
  q.xyz = q1.w * q2.xyz + q2.w * q1.xyz + cross(q1.xyz, q2.xyz);

  return q;
}

// Tangent Space calculation from PBRT
void genTangSpace(vec2 uvs[3],
                  vec3 pos[3],
                  f16vec3 triangleNormal,
                  f16vec3 interpolatedNormal,
                  out f16vec3 tangentU,
                  out f16vec3 tangentV)
{
  // Compute triangle partial derivatives

  const vec3 p0 = pos[0];
  const vec3 p1 = pos[1];
  const vec3 p2 = pos[2];
  const vec2 duv02 = uvs[0] - uvs[2], duv12 = uvs[1] - uvs[2];
  const vec3 dp02 = p0 - p2, dp12 = p1 - p2;
  const float determinant = duv02[0] * duv12[1] - duv02[1] * duv12[0];

  // Note: 32 bit floats used for these tangent vectors as they can get very large in some of this process (>300), which
  // causes overflows for 16 bit floats when calculating the length for normalization (due to needing to get their squared length first).
  // Having them 32 bit floats all the way through is slightly more expensive but should benefit from the greater precision and
  // not need as many conversions back and forth.
  vec3 newTangentU;
  vec3 newTangentV;

  const bool degenerateUV = abs(determinant) < 1e-8f;

  if (!degenerateUV)
  {
    const float invdet = 1.0f / determinant;

    newTangentU = (duv12[1] * dp02 - duv02[1] * dp12) * invdet;
    newTangentV = (-duv12[0] * dp02 + duv02[0] * dp12) * invdet;
  }

  const vec3 newNormal = cross(newTangentU, newTangentV);
  const bool degenerateBasis = all(newNormal == vec3(0.0f));

  // Gram-Schmidt Orthogonalization
  // Note: Converted to 32 bit float to use with other vectors easier, hopefully won't take up too many more registers.
  const vec3 preciseInterpolatedNormal = vec3(interpolatedNormal);

  // Note: Orthogonalizing here will not change the cross product's direction (relevant for later) as the orthogonalized vector
  // is a linear combination of the two input vectors and thus will stay as part of the plane spanned by the two vectors.
  newTangentU = orthogonalize(newTangentU, preciseInterpolatedNormal);

  if (degenerateUV || degenerateBasis || dot(newTangentU, newTangentU) == 0.0f)
  {
    calcOrthonormalBasis(triangleNormal, tangentU, tangentV);

    // Note: calcOrthonormalBasis is already orthonormal and does not need orthogonalization/normalization
    return;
  }

  const float bitangentSign = signNotZero(dot(cross(preciseInterpolatedNormal, newTangentU), newTangentV));

  // Note: Float 16 conversion done after normalization in these cases to avoid precision/overflow issues with large tangent vectors.
  // Not quite as accurate as this may result in a slightly non-normalized vector compared to normalizing it in this quantized form,
  // but it should be fine.
  tangentU = f16vec3(normalize(newTangentU));
  tangentV = f16vec3(normalize(bitangentSign * cross(preciseInterpolatedNormal, newTangentU)));
}

// Smart bent normal for ray tracing
// See appendix A.3 in https://arxiv.org/pdf/1705.01263.pdf
f16vec3 getBentNormal(f16vec3 geometryNormal, f16vec3 shadingNormal, f16vec3 viewDirection)
{
  // Specular reflection in shading normal
  const f16vec3 R = reflect(viewDirection, shadingNormal);
  const float16_t a = dot(geometryNormal, R);

  if (a < float16_t(0.0)) // Perturb normal
  {
    const float16_t b = max(float16_t(0.0001), dot(shadingNormal, geometryNormal));
    const f16vec3 newVector = -viewDirection + normalize(R - shadingNormal * a / b);

    // Note: Fall back to the geometry normal if if normalization is not possible.
    return safeNormalize(newVector, geometryNormal);
  }
  
  return shadingNormal;
}

f16mat3 getReflectionMatrix(f16vec3 normal)
{
  // https://en.wikipedia.org/wiki/Transformation_matrix#Reflection_2
  // Note: This matrix is involutory, meaning it is equal to its own inverse. This means it can
  // be used in either direction for a transformation without issue.

  const float16_t a = normal.x;
  const float16_t b = normal.y;
  const float16_t c = normal.z;

  return f16mat3(
    float16_t(1)-float16_t(2)*a*a, float16_t(-2)*a*b, float16_t(-2)*a*c,
    float16_t(-2)*a*b, float16_t(1)-float16_t(2)*b*b, float16_t(-2)*b*c,
    float16_t(-2)*a*c, float16_t(-2)*b*c, float16_t(1)-float16_t(2)*c*c
  );
}

f16mat3 getRefractionMatrix(f16vec3 normal)
{
  // Todo
  return f16mat3(1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f);
}

f16mat3 getIdentityMatrix()
{
  return f16mat3(1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f);
}

// Calculate a non-normalized gaussian weight for a sample position
// Returns 1 if sigma is 0 (disabled weighting)
float calcGaussianWeight(float3 targetPosition, float3 samplePosition, float sigma)
{
  if (sigma == 0.0f)
  {
    return 1.0f;
  }

  const float3 vectorToSample = samplePosition - targetPosition;
  const float distToSampleSq = dot(vectorToSample, vectorToSample);
  const float s2 = sigma * sigma;

  // Since it's non normalized don't unnecessarily apply constant scale factor
  const float weight = exp(-(distToSampleSq / (2.0f * s2)));

  return weight;
}

float3 BicubicSampleCatmullRom(Texture2D tex, SamplerState samp, float2 samplePos, float2 invTextureSize)
{
  float2 tc = floor(samplePos - 0.5) + 0.5;
  float2 f = saturate(samplePos - tc);
  float2 f2 = f * f;
  float2 f3 = f2 * f;

  float2 w0 = f2 - 0.5 * (f3 + f);
  float2 w1 = 1.5 * f3 - 2.5 * f2 + 1;
  float2 w3 = 0.5 * (f3 - f2);
  float2 w2 = 1 - w0 - w1 - w3;

  float2 w12 = w1 + w2;

  float2 tc0 = (tc - 1) * invTextureSize;
  float2 tc12 = (tc + w2 / w12) * invTextureSize;
  float2 tc3 = (tc + 2) * invTextureSize;

  float3 result =
    tex.SampleLevel(samp, float2(tc0.x,  tc0.y),  0).rgb * (w0.x  * w0.y)  +
    tex.SampleLevel(samp, float2(tc0.x,  tc12.y), 0).rgb * (w0.x  * w12.y) +
    tex.SampleLevel(samp, float2(tc0.x,  tc3.y),  0).rgb * (w0.x  * w3.y)  +
    tex.SampleLevel(samp, float2(tc12.x, tc0.y),  0).rgb * (w12.x * w0.y)  +
    tex.SampleLevel(samp, float2(tc12.x, tc12.y), 0).rgb * (w12.x * w12.y) +
    tex.SampleLevel(samp, float2(tc12.x, tc3.y),  0).rgb * (w12.x * w3.y)  +
    tex.SampleLevel(samp, float2(tc3.x,  tc0.y),  0).rgb * (w3.x  * w0.y)  +
    tex.SampleLevel(samp, float2(tc3.x,  tc12.y), 0).rgb * (w3.x  * w12.y) +
    tex.SampleLevel(samp, float2(tc3.x,  tc3.y),  0).rgb * (w3.x  * w3.y);

  return max(0, result);
}
