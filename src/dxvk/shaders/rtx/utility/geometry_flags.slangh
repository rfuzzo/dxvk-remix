/*
* Copyright (c) 2022-2023, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

#include "rtx/concept/ray_portal/ray_portal.slangh"
#include "rtx/utility/packing.slangh"

struct GeometryFlags
{
  // GBuffer Flags

  bool primarySelectedIntegrationSurface;
  bool secondarySurfaceMask;
  bool isViewModel;                 // Primary hit is a view model surface
  PortalSpace2BitsType portalSpace; // Portal space the primary hit is in

  // Integrator Flags
  // Note: These are included here as the flags are read regardless by both integrator passes,
  // making it a useful way to transfer over some flag data without adding additional complexity.
  bool insideMedium;
  bool firstSampledLobeIsSpecular;
  bool performPSTR;
  bool performPSRR;
  bool isViewModelRay;

  uint8_t objectMask;
};

uint geometryFlagsEncode(GeometryFlags geometryFlags)
{
  uint encodedFlags = 0;

  encodedFlags = packedFlagSet(
    encodedFlags, geometryFlags.primarySelectedIntegrationSurface ? (1 << 0) : 0);
  encodedFlags = packedFlagSet(
    encodedFlags, geometryFlags.secondarySurfaceMask ? (1 << 1) : 0);
  encodedFlags = packedFlagSet(
    encodedFlags, geometryFlags.isViewModel ? (1 << 2) : 0);

  encodedFlags |= (geometryFlags.portalSpace & 0b11) << 3;

  encodedFlags = packedFlagSet(
    encodedFlags, geometryFlags.insideMedium ? (1 << 5) : 0);
  encodedFlags = packedFlagSet(
    encodedFlags, geometryFlags.firstSampledLobeIsSpecular ? (1 << 6) : 0);
  encodedFlags = packedFlagSet(
    encodedFlags, geometryFlags.isViewModelRay ? (1 << 7) : 0);
  encodedFlags = packedFlagSet(
    encodedFlags, geometryFlags.performPSTR ? (1 << 8) : 0);
  encodedFlags = packedFlagSet(
    encodedFlags, geometryFlags.performPSRR ? (1 << 9) : 0);

#if OBJECT_MASK_ALL_DYNAMIC_NUMBER_OF_ACTIVE_BITS > (16 - 12)
  "There is not enough bits in the encoded geometry flags for dynamic object mask."
#endif   

  uint dynamicObjectMaskBits = (uint(geometryFlags.objectMask) & OBJECT_MASK_ALL_DYNAMIC) 
                         >> OBJECT_MASK_ALL_DYNAMIC_FIRST_ACTIVE_BIT_OFFSET;
  encodedFlags |= dynamicObjectMaskBits << 11; 

  return encodedFlags;
}

void geometryFlagsWriteToGBuffer(
  GeometryFlags geometryFlags,
  ivec2 position,
  RWTexture2D<uint> sharedFlagsTexture)
{
  sharedFlagsTexture[position] = geometryFlagsEncode(geometryFlags);
}

GeometryFlags geometryFlagsDecode(uint16_t encodedFlags)
{
  GeometryFlags geometryFlags;

  geometryFlags.primarySelectedIntegrationSurface = packedFlagGet(encodedFlags, (1 << 0));
  geometryFlags.secondarySurfaceMask = packedFlagGet(encodedFlags, (1 << 1));
  geometryFlags.isViewModel = packedFlagGet(encodedFlags, (1 << 2));

  geometryFlags.portalSpace = (encodedFlags >> 3) & 0b11;

  geometryFlags.insideMedium = packedFlagGet(encodedFlags, (1 << 5));
  geometryFlags.firstSampledLobeIsSpecular = packedFlagGet(encodedFlags, (1 << 6));
  geometryFlags.isViewModelRay = packedFlagGet(encodedFlags, (1 << 7));
  geometryFlags.performPSTR = packedFlagGet(encodedFlags, (1 << 8));
  geometryFlags.performPSRR = packedFlagGet(encodedFlags, (1 << 9));

  geometryFlags.objectMask = ((encodedFlags >> 11) << OBJECT_MASK_ALL_DYNAMIC_FIRST_ACTIVE_BIT_OFFSET) & OBJECT_MASK_ALL_DYNAMIC;


  return geometryFlags;
}

GeometryFlags geometryFlagsReadFromGBuffer(
  ivec2 position,
  Texture2D<uint> sharedFlagsTexture)
{
  return geometryFlagsDecode(sharedFlagsTexture[position]);
}

GeometryFlags geometryFlagsReadFromGBuffer(
  ivec2 position,
  RWTexture2D<uint> sharedFlagsTexture)
{
  return geometryFlagsDecode(sharedFlagsTexture[position]);
}
